/**{{header_comment()}}*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using {{service_name}}.Models;

namespace {{service_name}}.Repository.Contracts
{
    public interface IRepository<TDocument, TID> where TDocument : class
    {
        IQueryable<TDocument> AsQueryable();
        IEnumerable<TDocument> Filter(Expression<Func<TDocument, bool>> filterExpression);
        IEnumerable<TProjected> FilterAndProject<TProjected>(Expression<Func<TDocument, bool>> filterExpression,
            Expression<Func<TDocument, TProjected>> projectionExpression);
        TDocument FindOne(Expression<Func<TDocument, bool>> filterExpression);
        Task<TDocument> FindOneAsync(Expression<Func<TDocument, bool>> filterExpression);
        TDocument FindById(TID id);
        Task<TDocument> FindByIdAsync(TID id);
        TDocument InsertOne(TDocument document);
        Task<TDocument> InsertOneAsync(TDocument document);
        ICollection<TDocument> InsertMany(ICollection<TDocument> documents);
        Task<ICollection<TDocument>> InsertManyAsync(ICollection<TDocument> documents);
        TDocument UpdateOne(TID id, TDocument document);
        Task<TDocument> UpdateOneAsync(TID id, TDocument document);
        void DeleteOne(Expression<Func<TDocument, bool>> filterExpression);
        Task DeleteOneAsync(Expression<Func<TDocument, bool>> filterExpression);
        void DeleteById(TID id);
        Task DeleteByIdAsync(TID id);
        void DeleteMany(Expression<Func<TDocument, bool>> filterExpression);
        Task DeleteManyAsync(Expression<Func<TDocument, bool>> filterExpression);
    }
}
