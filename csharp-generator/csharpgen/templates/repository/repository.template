/**{{header_comment()}}*/

using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using {{service_name}}.Repository.Contracts;
using {{service_name}}.Settings;

namespace {{service_name}}.Repository.Impl
{
    public class Repository<TDocument, TID> : IRepository<TDocument, TID> where TDocument : class
    {
        private readonly IMongoCollection<TDocument> _collection;

        public Repository(IMongoDbSettings settings)
        {
            var database = new MongoClient(settings.ConnectionString).GetDatabase(settings.DatabaseName);
            var typename = typeof(TDocument).Name;
            _collection = database.GetCollection<TDocument>(typename[0..1].ToLower() + typename[1..]);
        }

        public virtual IQueryable<TDocument> AsQueryable()
        {
            return _collection.AsQueryable();
        }

        public virtual IEnumerable<TDocument> Filter(Expression<Func<TDocument, bool>> filterExpression)
        {
            return _collection.Find(filterExpression).ToEnumerable();
        }

        public virtual IEnumerable<TProjected> FilterAndProject<TProjected>(Expression<Func<TDocument, bool>> filterExpression,
            Expression<Func<TDocument, TProjected>> projectionExpression)
        {
            return _collection.Find(filterExpression).Project(projectionExpression).ToEnumerable();
        }

        public virtual TDocument FindOne(Expression<Func<TDocument, bool>> filterExpression)
        {
            return _collection.Find(filterExpression).FirstOrDefault();
        }

        public virtual Task<TDocument> FindOneAsync(Expression<Func<TDocument, bool>> filterExpression)
        {
            return Task.Run(() => _collection.Find(filterExpression).FirstOrDefaultAsync());
        }

        public virtual TDocument FindById(TID id)
        {
            var filter = Builders<TDocument>.Filter.Eq("_id", id);
            return _collection.Find(filter).SingleOrDefault();
        }

        public virtual Task<TDocument> FindByIdAsync(TID id)
        {
            return Task.Run(() =>
            {
                var filter = Builders<TDocument>.Filter.Eq("_id", id);
                return _collection.Find(filter).SingleOrDefaultAsync();
            });
        }

        public virtual TDocument InsertOne(TDocument document)
        {
            _collection.InsertOne(document);
            return document;
        }

        public virtual Task<TDocument> InsertOneAsync(TDocument document)
        {
            return Task.Run(() =>
            {
                _collection.InsertOneAsync(document);
                return document;
            });
        }

        public ICollection<TDocument> InsertMany(ICollection<TDocument> documents)
        {
            _collection.InsertMany(documents);
            return documents;
        }

        public virtual async Task<ICollection<TDocument>> InsertManyAsync(ICollection<TDocument> documents)
        {
            await _collection.InsertManyAsync(documents);
            return documents;
        }

        public TDocument UpdateOne(TID id, TDocument document)
        {
            var filter = Builders<TDocument>.Filter.Eq("_id", id);
            _collection.FindOneAndReplace(filter, document);
            return document;
        }

        public virtual async Task<TDocument> UpdateOneAsync(TID id, TDocument document)
        {
            var filter = Builders<TDocument>.Filter.Eq("_id", id);
            await _collection.FindOneAndReplaceAsync(filter, document);
            return document;
        }

        public void DeleteOne(Expression<Func<TDocument, bool>> filterExpression)
        {
            _collection.FindOneAndDelete(filterExpression);
        }

        public Task DeleteOneAsync(Expression<Func<TDocument, bool>> filterExpression)
        {
            return Task.Run(() => _collection.FindOneAndDeleteAsync(filterExpression));
        }

        public void DeleteById(TID id)
        {
            var filter = Builders<TDocument>.Filter.Eq("_id", id);
            _collection.FindOneAndDelete(filter);
        }

        public Task DeleteByIdAsync(TID id)
        {
            return Task.Run(() =>
            {
                var filter = Builders<TDocument>.Filter.Eq("_id", id);
                _collection.FindOneAndDeleteAsync(filter);
            });
        }

        public void DeleteMany(Expression<Func<TDocument, bool>> filterExpression)
        {
            _collection.DeleteMany(filterExpression);
        }

        public Task DeleteManyAsync(Expression<Func<TDocument, bool>> filterExpression)
        {
            return Task.Run(() => _collection.DeleteManyAsync(filterExpression));
        }
    }
}
