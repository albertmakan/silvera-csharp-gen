/**{{header_comment}}*/

using {{service_name}}.Utils;
using Steeltoe.CircuitBreaker.Hystrix;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;

namespace {{service_name}}.Services.Dependencies
{
    public interface I{{dependency_service_name}}Client
    {
        {% for function in functions -%}
        {{function.ret_type|convert_type}} {{function.name|first_upper}}({{function|unfold_function_params}});
        {% endfor %}
    }

    public class {{dependency_service_name}}Client : I{{dependency_service_name}}Client
    {
        {% for function in functions -%}
        private readonly {{function.name|first_upper}}Command _{{function.name}}Command;
        {% endfor %}
        public {{dependency_service_name}}Client({{constructor_params}})
        {
            {% for function in functions -%}
            _{{function.name}}Command = {{function.name}}Command;
            {% endfor %}
        }
        {% for function in functions %}
        public {{function.ret_type|convert_type}} {{function.name|first_upper}}({{function|unfold_function_params}})
        {
            {% for param in function.params -%}
            _{{function.name}}Command.{{param.name}} = {{param.name}};
            {% endfor %}{{""-}}
            return _{{function.name}}Command.Execute();
        }
        {% endfor %}
    }

    {% for function in functions -%}
    public class {{function.name|first_upper}}Command : HystrixCommand<{{function.ret_type|convert_type}}>
    {
        private readonly HttpClient _httpClient;
        {% for param in function.params -%}
        public {{param.type|convert_type}} {{param.name}} { get; set; }
        {% endfor %}
        public {{function.name|first_upper}}Command(IHystrixCommandOptions options, IHttpClientFactory httpClientFactory) : base(options)
        {
            _httpClient = httpClientFactory.CreateClient("{{dependency_service_name}}");
        }

        protected override async Task<{{function.ret_type|convert_type}}> RunAsync()
        {
            var response = await _httpClient.{{
            {"GET":"GetAsync","POST":"PostAsJsonAsync","PUT":"PutAsJsonAsync","DELETE":"DeleteAsync"}[function.dep.http_verb]
            }}({{function.dep|request_uri_and_body}});
            return await response.Content.ReadFromJsonAsync<{{function.ret_type|convert_type}}>();
        }

        protected override {{function.ret_type|convert_type}} RunFallback() => {{function|get_default_ret_val}};
    }
    {% endfor %}
}
