/**{{header_comment()}}*/

using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using MongoDB.Bson.Serialization.Conventions;
using Steeltoe.Discovery.Client;
using Steeltoe.Discovery.Eureka;
using Steeltoe.Common.Http.Discovery;
using Steeltoe.CircuitBreaker.Hystrix;
using System;
using System.Text;

using {{service_name}}.Middleware;
using {{service_name}}.Repository.Contracts;
using {{service_name}}.Repository.Impl;
using {{service_name}}.Services.Base;
using {{service_name}}.Services.Impl;
using {{service_name}}.Services.Dependencies;
using {{service_name}}.Settings;
using {{service_name}}.Messaging;

namespace {{service_name}}
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDiscoveryClient(Configuration);
            services.AddServiceDiscovery(a => a.UseEureka());

            // TODO
            services.AddHttpClient("user", client => client.BaseAddress = new Uri("http://user-service/")).AddServiceDiscovery();

            services.AddControllers();
            services.AddSwaggerGen(options =>
            {
                options.SwaggerDoc(name: "v1", new OpenApiInfo { Title = "{{service_name}}", Version = "v1" });
                // Uncomment for auth in swagger:
                /**
                options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    Name = "Authorization",
                    Type = SecuritySchemeType.ApiKey,
                    Scheme = "Bearer",
                    BearerFormat = "JWT",
                    In = ParameterLocation.Header,
                    Description = "JWT Authorization header using the Bearer scheme."
                });

                options.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new() { Reference = new() { Id = "Bearer", Type = ReferenceType.SecurityScheme } },
                        Array.Empty<string>()
                    },
                });
                */
            });

            services.Configure<MongoDbSettings>(Configuration.GetSection("MongoDbSettings"));
            services.AddSingleton<IMongoDbSettings>(serviceProvider =>
                serviceProvider.GetRequiredService<IOptions<MongoDbSettings>>().Value
            );

            // TODO
            services.AddHystrixCommand<GetNameCommand>("UserGroup", Configuration);

            // DI
            services.AddSingleton(typeof(IRepository<>), typeof(Repository<>));

            // TODO
            services.AddSingleton(typeof(IPaperRepository), typeof(PaperRepository));

            services.AddSingleton(typeof(IKafkaProducer), typeof(KafkaProducer));

            // TODO
            services.AddSingleton(typeof(IUserClient), typeof(UserClient));
            services.AddSingleton(typeof(I{{service_name}}Service), typeof({{service_name}}Service));

            // Uncomment for AUTHENTICATION:
            /**
            services.AddAuthentication(x =>
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer(x =>
            {
                x.RequireHttpsMetadata = false;
                x.SaveToken = true;
                x.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes("somesecret######")),
                    ValidateIssuer = false,
                    ValidateAudience = false,
                    ValidateLifetime = true,
                    ClockSkew = TimeSpan.Zero
                };
            });
            */

            // MONGO conventions
            ConventionRegistry.Register("Camel case convention", new ConventionPack
            {
                new CamelCaseElementNameConvention(),
                new IgnoreExtraElementsConvention(true)
            }, t => true);
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "{{service_name}} v1"));
            }

            // app.UseHttpsRedirection();

            app.UseMiddleware<ErrorHandlerMiddleware>();

            app.UseRouting();

            app.UseAuthentication();

            app.UseAuthorization();

            // TODO
            app.UseHystrixRequestContext();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });

            app.ApplicationServices.GetService<I{{service_name}}Service>();
        }
    }
}
