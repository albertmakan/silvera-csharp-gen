/**{{header_comment()}}*/

using System;
using System.Text;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using MongoDB.Bson.Serialization;
using MongoDB.Bson.Serialization.Conventions;
using MongoDB.Bson.Serialization.IdGenerators;
{% if should_register -%}
using Steeltoe.Discovery.Client;
using Steeltoe.Discovery.Eureka;
using Steeltoe.Common.Hosting;
{%- endif %}
{% if dependencies -%}
using Steeltoe.Common.Http.Discovery;
using Dep = {{service_name}}.Services.Dependencies;
{%- endif %}
using {{service_name}}.Middleware;
using {{service_name}}.Repository.Contracts;
using {{service_name}}.Repository.Impl;
using {{service_name}}.Settings;
using Base = {{service_name}}.Services.Base;
using Impl = {{service_name}}.Services.Impl;
{%- if producer_needed %}
using {{service_name}}.Messaging;
{%- endif %}

var builder = WebApplication.CreateBuilder(args);

{% if should_register -%}
// Register service
builder.Services.AddDiscoveryClient(builder.Configuration);
builder.Services.AddServiceDiscovery(a => a.UseEureka());
builder.UseCloudHosting({{port}});
{% endif %}

{%- for ds in dependencies %}
{% if ds.service_registry -%}
builder.Services.AddHttpClient("{{ds.name}}", client => client.BaseAddress = new Uri("http://{{ds.name}}/"))
    .AddServiceDiscovery();
{%- else -%}
builder.Services.AddHttpClient("{{ds.name}}", client => client.BaseAddress = new Uri("{{ds.url}}:{{ds.port}}/"));
{%- endif %}
{%- endfor %}

builder.Services.AddControllers();
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc(name: "v1", new OpenApiInfo { Title = "{{service_name}}", Version = "v1" });
    // Uncomment for auth in swagger:
    /**
    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "JWT Authorization header using the Bearer scheme."
    });

    options.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new() { Reference = new() { Id = "Bearer", Type = ReferenceType.SecurityScheme } },
            Array.Empty<string>()
        },
    });
    */
});

builder.Services.Configure<MongoDbSettings>(builder.Configuration.GetSection("MongoDbSettings"));
builder.Services.AddSingleton<IMongoDbSettings>(p => p.GetRequiredService<IOptions<MongoDbSettings>>().Value);

// Dependency injection
// builder.Services.AddSingleton(typeof(IRepository<,>), typeof(Repository<,>));
{%- for repo in repositories %}
builder.Services.AddSingleton<I{{repo}}Repository, {{repo}}Repository>();
{%- endfor %}

{%- if producer_needed %}
builder.Services.AddSingleton<IKafkaProducer, KafkaProducer>();
{%- endif %}

{%- for ds in dependencies %}
builder.Services.AddSingleton<Dep.I{{ds.name}}Client, Dep.{{ds.name}}Client>();
{%- endfor %}

builder.Services.AddSingleton<Base.I{{service_name}}Service, Impl.{{service_name}}Service>();

// Uncomment for AUTHENTICATION:
/**
builder.Services.AddAuthentication(x =>
{
    x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(x =>
{
    x.RequireHttpsMetadata = false;
    x.SaveToken = true;
    x.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes("somesecret######")),
        ValidateIssuer = false,
        ValidateAudience = false,
        ValidateLifetime = true,
        ClockSkew = TimeSpan.Zero
    };
});
*/

ConventionRegistry.Register("MongoDB serialization conventions", new ConventionPack
{
    new CamelCaseElementNameConvention(),
    new IgnoreExtraElementsConvention(true)
}, t => true);

BsonSerializer.RegisterIdGenerator(typeof(string), StringObjectIdGenerator.Instance);

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "{{service_name}} v1"));
}
app.UseMiddleware<ErrorHandlerMiddleware>();
// app.UseHttpsRedirection();
app.UseRouting();
app.UseAuthentication();
app.UseAuthorization();
app.UseEndpoints(endpoints => endpoints.MapControllers());

app.Services.GetService<Base.I{{service_name}}Service>();

app.Run();
